{"version":3,"sources":["helper/CssGeneratorHelper.js","components/Form/AvatarsForm.js","components/CopyClipboardButton.js","components/Content/GeneratedCssContent.js","components/Content/FirstTimeContent.js","components/Content/GenerateContent.js","components/Content/DemoContent.js","App.js","reportWebVitals.js","index.js"],"names":["generateTemplateCss","avatarCss","idleBrightness","jumpHeight","DEFAULT_TEMPLATE_CSS","Text","Typography","Paragraph","AvatarsForm","onSubmit","useState","accounts","setAccounts","nextAccount","setNextAccount","Form","useForm","form","jumpText","brightnessText","userAccInputText","avatarInputText","speakingAvatarInputText","onFinish","values","userConfigs","map","userConfig","index","avatarUrl","userId","speakingAvatarCss","speakingAvatarUrl","orderCss","join","generateAvatarTemplate","account","num","trim","filter","config","finalCss","undefined","brightness","message","success","placement","title","Item","name","initialValue","label","min","max","tipFormatter","value","size","icon","CloseCircleFilled","onClick","danger","direction","shape","UserAddOutlined","ToolFilled","htmlType","type","CopyClipboardButton","text","onCopy","CopyFilled","Title","Content","Layout","GeneratedCssContent","css","generatedCss","level","Link","FirstTimeContent","isVisible","setGeneratedCss","span","PreviewGroup","href","target","style","maxHeight","src","strong","event","GenerateContent","DemoContent","align","justify","width","height","autoPlay","controls","muted","loop","Sider","DEMO_PAGE","FIRST_TIME_PAGE","GENERATE_PAGE","App","page","setPage","overflow","position","left","theme","defaultSelectedKeys","key","PlayCircleFilled","SmileFilled","padding","marginLeft","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a896a795.chunk.js","sourcesContent":["export const generateAvatarTemplate = (userConfigs) =>\r\n    userConfigs.map((userConfig, index) => {\r\n        const avatarCss = !userConfig.avatarUrl ? '' : `img[data-reactid*=\"${userConfig.userId}\"] {content: url('${userConfig.avatarUrl}');}\\n`\r\n        const speakingAvatarCss = !userConfig.speakingAvatarUrl ? '' : `img[data-reactid*=\"${userConfig.userId}\"].speaking {content: url('${userConfig.speakingAvatarUrl}');}\\n`\r\n        const orderCss = `li[data-reactid*=\"${userConfig.userId}\"] {order: ${index + 1};}\\n`\r\n        return `${avatarCss}${speakingAvatarCss}${orderCss}`\r\n    }).join('\\n');\r\n\r\nexport const generateTemplateCss = ({ avatarCss, idleBrightness, jumpHeight }) =>\r\n    `.avatar {\r\n    border: none !important;\r\n    border-radius: 0 !important;\r\n    width: 400px !important;\r\n    height: 400px !important;\r\n    object-fit: contain;\r\n    padding: 0;\r\n    margin: 0 !important;\r\n    padding-left: 50px;\r\n    padding-top: 50px;\r\n}\r\n\r\n.avatar {\r\n    filter: brightness(${idleBrightness}%);\r\n}\r\n\r\n.avatar.speaking {\r\n    filter: unset !important;\r\n    transform: translate(0, -${jumpHeight}%) !important;\r\n}\r\n\r\n.voice-states {\r\n    display: flex !important;\r\n    flex-wrap: wrap;\r\n    height: 100%;\r\n    width: 100%;\r\n    margin: 0 !important;\r\n    padding: 0 !important;\r\n}\r\n\r\n.voice-state {\r\n    width: unset !important;\r\n    height: unset !important;\r\n    margin: 0 !important;\r\n    float: unset !important;\r\n}\r\n\r\n.user {\r\n    display: none !important;\r\n}\r\n\r\n${avatarCss}`;\r\n\r\nexport const DEFAULT_TEMPLATE_CSS = generateTemplateCss({ avatarCss: '', idleBrightness: 50, jumpHeight: 5 });","import React, { Fragment, useState } from 'react';\r\nimport {\r\n  Form, Button, Typography,\r\n  Input, Slider, Divider,\r\n  Tooltip, message, Space\r\n} from 'antd';\r\nimport {\r\n  UserAddOutlined,\r\n  ToolFilled,\r\n  CloseCircleFilled\r\n} from '@ant-design/icons';\r\nimport '../../App.less';\r\nimport { generateAvatarTemplate, generateTemplateCss } from '../../helper/CssGeneratorHelper'\r\n\r\nconst { Text, Paragraph } = Typography;\r\n\r\n\r\nconst AvatarsForm = ({ onSubmit }) => {\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [nextAccount, setNextAccount] = useState(0);\r\n  const [form] = Form.useForm();\r\n\r\n  const jumpText = (<Fragment>\r\n    <Paragraph>How high avatars jump up when they are speaking.</Paragraph>\r\n    <Paragraph>\r\n      <ul>\r\n        <li>0% - No movement</li>\r\n        <li>5% - Jump 5% height of avatar</li>\r\n        <li>10% - Jump 10% height of the avatar</li>\r\n      </ul>\r\n    </Paragraph>\r\n  </Fragment>);\r\n\r\n  const brightnessText = <Text>How bright the avatars are when they are not speaking.</Text>;\r\n  const userAccInputText = <Text>Right click the user on Discord then 'Copy ID'.</Text>;\r\n  const avatarInputText = <Text>Link to an image. Works for JPEG, GIF, PNG. Other images may not work.</Text>;\r\n  const speakingAvatarInputText = (<Fragment><Paragraph>If you want a different image when the user is speaking.</Paragraph>\r\n    <Paragraph>Link to an image. Works for JPEG, GIF, PNG. Other images may not work.</Paragraph></Fragment>);\r\n\r\n  const handleSubmit = (values) => {\r\n    const userConfigs = accounts.map(account => {\r\n      const userId = values[`userId-${account.num}`] || '';\r\n      const avatarUrl = values[`avatarUrl-${account.num}`] || '';\r\n      const speakingAvatarUrl = values[`speakingAvatarUrl-${account.num}`] || '';\r\n\r\n      return {\r\n        userId: userId.trim(),\r\n        avatarUrl: avatarUrl.trim(),\r\n        speakingAvatarUrl: speakingAvatarUrl.trim()\r\n      }\r\n    }).filter(config => !!config.userId);\r\n\r\n    const avatarCss = generateAvatarTemplate(userConfigs)\r\n    onSubmit({\r\n      finalCss: generateTemplateCss({\r\n        avatarCss,\r\n        idleBrightness: values.brightness !== undefined ? values.brightness : 50,\r\n        jumpHeight: values.jumpHeight !== undefined ? values.jumpHeight : 5,\r\n      })\r\n    });\r\n    message.success('Generated new CSS!')\r\n  }\r\n\r\n  const handleAddAvatar = () => {\r\n    const num = nextAccount;\r\n    setAccounts([...accounts, { num }])\r\n    setNextAccount(nextAccount + 1);\r\n  }\r\n\r\n  const handleRemoveAvatar = (num) => {\r\n    setAccounts(accounts.filter(account => account.num !== num))\r\n  };\r\n\r\n  return (\r\n    <Form form={form} onFinish={handleSubmit} >\r\n      <Text>Choose your avatar settings.</Text>\r\n      <Tooltip placement=\"top\" title={brightnessText}>\r\n        <Form.Item name='brightness' initialValue={50} label=\"Inactive brightness\" >\r\n          <Slider min={0} max={100} tipFormatter={(value) => `${value}%`} />\r\n        </Form.Item>\r\n      </Tooltip>\r\n      <Tooltip placement=\"top\" title={jumpText}>\r\n        <Form.Item name='jumpHeight' initialValue={5} label=\"Highlight avatar jump\" >\r\n          <Slider min={0} max={10} tipFormatter={(value) => `${value}%`} />\r\n        </Form.Item>\r\n      </Tooltip>\r\n      {accounts.map((account) => (\r\n        <Fragment key={`account-${account.num}`}>\r\n          <Divider />\r\n          <Tooltip placement=\"top\" title={userAccInputText}>\r\n            <Form.Item name={`userId-${account.num}`} label=\"Discord User ID\" >\r\n              <Input />\r\n            </Form.Item>\r\n          </Tooltip>\r\n          <Tooltip placement=\"top\" title={avatarInputText}>\r\n            <Form.Item name={`avatarUrl-${account.num}`} label=\"Avatar Image Link\" >\r\n              <Input />\r\n            </Form.Item>\r\n          </Tooltip>\r\n          <Tooltip placement=\"top\" title={speakingAvatarInputText}>\r\n            <Form.Item name={`speakingAvatarUrl-${account.num}`} label=\"Highlight Avatar Image ID\">\r\n              <Input />\r\n            </Form.Item>\r\n          </Tooltip>\r\n          <Button size={'small'} icon={<CloseCircleFilled />} onClick={() => handleRemoveAvatar(account.num)} danger>Remove account</Button>\r\n        </Fragment>)\r\n      )}\r\n      <Divider />\r\n      <Space direction='vertical' size={'middle'}>\r\n        <Button shape=\"round\" icon={<UserAddOutlined />} size={'small'}\r\n          onClick={handleAddAvatar}>\r\n          Add account specific avatar\r\n        </Button>\r\n        <Paragraph>\r\n          <Button icon={<ToolFilled />} htmlType=\"submit\" type=\"primary\" shape=\"round\" size={'medium'}>\r\n            Generate Custom CSS\r\n          </Button>\r\n        </Paragraph>\r\n      </Space>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default AvatarsForm;","import React from 'react';\r\nimport {\r\n    Button,\r\n    message,\r\n} from 'antd';\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport {\r\n    CopyFilled\r\n} from '@ant-design/icons';\r\nimport '../App.less';\r\n\r\nconst CopyClipboardButton = ({ text }) => {\r\n    return (\r\n        <CopyToClipboard onCopy={() => message.success('Copied!')} text={text}>\r\n            <Button icon={<CopyFilled />} htmlType=\"submit\" type=\"primary\" shape=\"round\" size={'medium'}>\r\n                Copy to clipboard\r\n            </Button>\r\n        </CopyToClipboard>\r\n    )\r\n}\r\n\r\nexport default CopyClipboardButton;","import React from 'react';\r\nimport {\r\n    Layout, Typography,\r\n} from 'antd';\r\nimport '../../App.less';\r\nimport CopyClipboardButton from '../CopyClipboardButton';\r\n\r\nconst { Title, Paragraph } = Typography;\r\nconst { Content } = Layout;\r\n\r\nconst GeneratedCssContent = ({ generatedCss }) => {\r\n    const css = (generatedCss || '').trim();\r\n\r\n    return (\r\n        <Content>\r\n            <Title level={4}>Generated CSS</Title>\r\n            <CopyClipboardButton text={css} />\r\n            <Paragraph>\r\n                <pre>{css}</pre>\r\n            </Paragraph>\r\n            <CopyClipboardButton text={css} />\r\n        </Content>\r\n    )\r\n}\r\n\r\nexport default GeneratedCssContent;","import React, { useState } from 'react';\r\nimport {\r\n    Layout, Row, Col, Typography, Image,\r\n} from 'antd';\r\nimport AvatarsForm from '../Form/AvatarsForm'\r\nimport '../../App.less';\r\nimport GeneratedCssContent from './GeneratedCssContent';\r\nimport { DEFAULT_TEMPLATE_CSS } from '../../helper/CssGeneratorHelper'\r\n\r\nconst { Title, Text, Link, Paragraph } = Typography;\r\nconst { Content } = Layout;\r\n\r\nconst FirstTimeContent = ({ isVisible }) => {\r\n    const [generatedCss, setGeneratedCss] = useState(DEFAULT_TEMPLATE_CSS);\r\n\r\n    const handleSubmit = (event) => {\r\n        setGeneratedCss(event.finalCss)\r\n    }\r\n\r\n    if (!isVisible) return null;\r\n\r\n    return (\r\n        <Content>\r\n            <Row>\r\n                <Col span={10}>\r\n                    <Title level={4}>First Time Guide</Title>\r\n                    <Image.PreviewGroup>\r\n                        <ol>\r\n                            <li>\r\n                                <Text>Generate a Voice Widget link from <Link href='https://streamkit.discord.com/overlay' target='_blank'>Discord StreamKit</Link> and choose 'Install for OBS'.</Text>\r\n                                <Paragraph><Image style={{maxHeight:'150px'}} src=\"assets/step1.png\" /></Paragraph>\r\n                                <Paragraph>You will need to authorize access to your Discord account. Check your Discord app now!</Paragraph>\r\n                                <Paragraph><Image style={{maxHeight:'150px'}} src=\"assets/step2.png\" /></Paragraph>\r\n                            </li>\r\n                            <li>\r\n                                <Text>Choose 'Voice Widget'</Text>\r\n                                <Paragraph><Image style={{maxHeight:'150px'}} src=\"assets/step3.png\" /></Paragraph>\r\n                            </li>\r\n                            <li>\r\n                                <Text>Set the server and channel you want the overlay to display.</Text>\r\n                                <Paragraph><Text type=\"warning\" strong>Disable 'Show Speaking Users Only' or you will get unintended cuts.</Text></Paragraph>\r\n                                <Paragraph><Image style={{maxHeight:'150px'}} src=\"assets/step4.png\" /></Paragraph>\r\n                            </li>\r\n                            <li>\r\n                                <Text>Copy the overlay link.</Text>\r\n                                <Paragraph><Image style={{maxHeight:'150px'}} src=\"assets/step5.png\" /></Paragraph>\r\n                            </li>\r\n                            <li>\r\n                                <Text>Paste the link into 'Browser' source URL in OBS.</Text>\r\n                                <Paragraph><Text type=\"warning\" strong>Set the height to a minimum of 500. Anything less may cut your avatars.</Text></Paragraph>\r\n                                <Paragraph><Image style={{maxHeight:'150px'}} src=\"assets/step6.png\" /></Paragraph>\r\n                            </li>\r\n                            <li>\r\n                                <AvatarsForm onSubmit={handleSubmit} />\r\n                            </li>\r\n                            <li>\r\n                                <Text>Copy the generated CSS on the right and replace the 'Custom CSS' of 'Browser' source in OBS.</Text>\r\n                                <Paragraph><Text type=\"warning\" strong>Set the width and height to be high enough to see all the avatars added.</Text></Paragraph>\r\n                                <Paragraph><Image style={{maxHeight:'150px'}} src=\"assets/step7.png\" /></Paragraph>\r\n                            </li>\r\n                            <li>\r\n                                <Text>Duplicate/Trim and customize the 'Browser' source in OBS to your layout.</Text>\r\n                                <Paragraph><Text type=\"warning\" strong>Each avatar is 400px wide and 400px tall with 50px spacing on all sides.</Text></Paragraph>\r\n                                <Paragraph><Image style={{maxHeight:'150px'}} src=\"assets/step8.png\" /></Paragraph>\r\n                            </li>\r\n                        </ol>\r\n                    </Image.PreviewGroup>\r\n                </Col>\r\n                <Col span={1} />\r\n                <Col span={11}>\r\n                    <GeneratedCssContent generatedCss={generatedCss} />\r\n                </Col>\r\n            </Row>\r\n        </Content>\r\n    )\r\n}\r\n\r\nexport default FirstTimeContent;","import React, { useState } from 'react';\r\nimport {\r\n    Layout, Row, Col, Typography,\r\n} from 'antd';\r\nimport AvatarsForm from '../Form/AvatarsForm'\r\nimport '../../App.less';\r\nimport GeneratedCssContent from './GeneratedCssContent';\r\nimport { DEFAULT_TEMPLATE_CSS } from '../../helper/CssGeneratorHelper'\r\n\r\nconst { Title } = Typography;\r\nconst { Content } = Layout;\r\n\r\nconst GenerateContent = ({ isVisible }) => {\r\n    const [generatedCss, setGeneratedCss] = useState(DEFAULT_TEMPLATE_CSS);\r\n\r\n    const handleSubmit = (event) => {\r\n        setGeneratedCss(event.finalCss)\r\n    }\r\n\r\n    if (!isVisible) return null;\r\n    return (\r\n        <Content>\r\n            <Row>\r\n                <Col span={10}>\r\n                    <Title level={4}>Generate Custom Discord Avatar OBS Overlay</Title>\r\n                    <AvatarsForm onSubmit={handleSubmit} />\r\n                </Col>\r\n                <Col span={1} />\r\n                <Col span={11}>\r\n                    <GeneratedCssContent generatedCss={generatedCss} />\r\n                </Col>\r\n            </Row>\r\n        </Content>\r\n    )\r\n}\r\n\r\nexport default GenerateContent;","import React from 'react';\r\nimport {\r\n    Layout, Row, Col, Typography,\r\n} from 'antd';\r\nimport '../../App.less';\r\n\r\nconst { Title, } = Typography;\r\nconst { Content } = Layout;\r\n\r\nconst DemoContent = ({ isVisible }) => {\r\n    if (!isVisible) return null;\r\n    return (\r\n        <Content>\r\n            <Row align={'middle'} justify={'center'}><Title align={'center'} level={1}>Set your own avatar for Discord voice overlay in OBS</Title></Row>\r\n            <Row align={'middle'} justify={'center'}>\r\n                <Col span={16}>\r\n                    <video width=\"100%\" height=\"auto\" autoPlay controls muted loop>\r\n                        <source src=\"assets/demo.mp4\" type=\"video/mp4\" />\r\n                        Your browser does not support the video tag.\r\n                    </video>\r\n                </Col>\r\n            </Row>\r\n        </Content>\r\n    )\r\n}\r\n\r\nexport default DemoContent;","import React, { useState } from 'react';\nimport {\n  Layout, Menu\n} from 'antd';\nimport './App.less';\nimport FirstTimeContent from './components/Content/FirstTimeContent';\nimport GenerateContent from './components/Content/GenerateContent';\nimport {\n  PlayCircleFilled,\n  ToolFilled,\n  SmileFilled\n} from '@ant-design/icons';\nimport DemoContent from './components/Content/DemoContent';\n\nconst { Sider } = Layout;\n\nconst DEMO_PAGE = 'DEMO';\nconst FIRST_TIME_PAGE = 'FIRST';\nconst GENERATE_PAGE = 'GENERATE';\n\nconst App = () => {\n  const [page, setPage] = useState(DEMO_PAGE);\n  return (\n    <Layout style={{width:'100%'}}>\n      <Sider\n        width='12rem'\n        style={{\n          overflow: 'auto',\n          height: '100vh',\n          position: 'fixed',\n          left: 0,\n        }}\n      >\n        <Menu theme='dark' defaultSelectedKeys={[DEMO_PAGE]} onClick={(value) => setPage(value.key)}>\n          <Menu.Item key={DEMO_PAGE} icon={<PlayCircleFilled />}>\n            Demo\n          </Menu.Item>\n          <Menu.Item key={FIRST_TIME_PAGE} icon={<SmileFilled />}>\n            First Time Guide\n          </Menu.Item>\n          <Menu.Item key={GENERATE_PAGE} icon={<ToolFilled />}>\n            Generate Overlay\n          </Menu.Item>\n        </Menu>\n      </Sider>\n      <Layout style={{ padding: '1rem', marginLeft: '12rem' }}>\n        <DemoContent isVisible={page === DEMO_PAGE} />\n        <FirstTimeContent isVisible={page === FIRST_TIME_PAGE} />\n        <GenerateContent isVisible={page === GENERATE_PAGE} />\n      </Layout>\n    </Layout>\n  )\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}